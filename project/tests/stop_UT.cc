/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>

#include <iostream>
#include <string>
#include <list>
#include <string>

#include "../src/passenger_loader.h"
#include "../src/passenger_unloader.h"
#include "../src/passenger.h"
#include "../src/stop.h"

using namespace std;

/******************************************************
* TEST FEATURE SetUp
*******************************************************/
class StopTests : public ::testing::Test {
protected:
  Stop *one_param_stop, *full_stop;

  virtual void SetUp() {
    one_param_stop = new Stop(101);
    full_stop = new Stop(200, 12.123, 34.345);
  }

  virtual void TearDown() {
    delete one_param_stop;
    delete full_stop;
    one_param_stop = NULL;
    full_stop = NULL;
  }
};


/*******************************************************************************
 * Test Cases
 ******************************************************************************/

TEST_F(StopTests, SingleParamTest) {
  EXPECT_EQ(one_param_stop->GetId(), 101) << "ID incorrect for single parameter constructor" << endl;
  EXPECT_EQ(one_param_stop->GetLongitude(), 44.973723) << "Default longitude incorrect for single parameter constructor" << endl;
  EXPECT_EQ(one_param_stop->GetLatitude(), -93.235365) << "Default latitudde incorrect for single parameter constructor" << endl;
  size_t num_passengers = 0;
  EXPECT_EQ(one_param_stop->GetNumPassengersPresent(), num_passengers) << "Number of passengers incorrect: not 0 after single parameter constructor" << endl;
};

TEST_F(StopTests, FullyParameterizedConstructorTests) {
  EXPECT_EQ(full_stop->GetId(), 200) << "ID incorrect for single parameter constructor" << endl;
  EXPECT_EQ(full_stop->GetLongitude(), 12.123) << "Default longitude incorrect for single parameter constructor" << endl;
  EXPECT_EQ(full_stop->GetLatitude(), 34.345) << "Default latitudde incorrect for single parameter constructor" << endl;
  size_t num_passengers = 0;
  EXPECT_EQ(full_stop->GetNumPassengersPresent(), num_passengers) << "Number of passengers incorrect: not 0 after single parameter constructor" << endl;
};
